@model MembershipUserCollection
@using System.Linq;
@{
    ViewBag.Title = "Help Editor Administration | Users";
    //Layout = "~/Views/Shared/_LayoutDashboard.cshtml";
}

<h2>Help Editor Users</h2>

@{
    //List<WebGridColumn> grid = Model.Cast<MembershipUser>();
    //var grid = new WebGrid(source: Model.Cast<AdminUsersModel>(), defaultSort: "UserName", rowsPerPage: 20);

    var grid = new WebGrid(source: Model.Cast<MembershipUser>(), defaultSort: "UserName", rowsPerPage: 20);
    
    //// TODO test
    //ViewBag.columns = new[]  
    //{ 
    //    new WebGridColumn 
    //    { 
    //        ColumnName = "Test" 
    //    }, 
    //    new WebGridColumn 
    //    { 
    //        CanSort = true, 
    //        ColumnName = "StudyName"                 
    //    }, 
    //}; 

    
    ////var gridColumns = new List<WebGridColumn>();
    //WebGridColumn[] gridColumns = new[]{
    //  new WebGridColumn 
    //    { 
    //        ColumnName = "Test" 
    //    }
    //};
    //WebGridColumn column = new WebGridColumn();
    //column.ColumnName = "Test";
    //column.Header = "Test";

    //gridColumns.Add(grid.Column("UserName", "UserName"));
    //gridColumns.Add(column);

    //grid.Columns(gridColumns[1]);
    
    //grid = new WebGrid(source: gridColumns, defaultSort: "UserName", rowsPerPage: 20);
    
    //List<WebGridColumn> columnsAdded = new List<WebGridColumn>();
    //columnsAdded.Add(column);     
    //var gridNew = new WebGrid(source: columnsAdded, defaultSort: "UserName", rowsPerPage: 20);

    //WebGridColumn column2 = grid.Column("Comment", "Comment", canSort: true);
    //columns.Add(grid.Column("UserName", "UserName", format:@<a href="/EditUser?Name=@item.UserName">@item.UserName</a>, canSort: true));
    //@grid.GetHtml(columns: columns);
    //column.ColumnName = "Comment";

    //IEnumerable<WebGridColumn> cols = grid.Columns(grid.Column("Comment", "Comment", canSort: true), grid.Column("UserName", "UserName", format:@<a href="/EditUser?Name=@item.UserName">@item.UserName</a>, canSort: true));
    //IEnumerable<string> columnNames = new List<string>("Comment, Delete");
    //gridNew.ColumnNames = grid.ColumnNames;

    //List<WebGridColumn> columns = new List<WebGridColumn>();
    //foreach (var column in Model.Cast<MembershipUser>()..Columns)
    //{
    //    var col = new WebGridColumn();
    //    col.Header = column.Name;
    //    col.Format = (item) => @Html.Raw("<text>" + @item.Attributes[col.Header] + "</text>");
    //    columns.Add(col);
    //} 

    //List<WebGridColumn> adminColumns = new List<WebGridColumn>();
    //WebGridColumn[] adminColumn = new WebGridColumn[1];
    //adminColumns.Add(column);
    //IEnumerable<WebGridColumn> adminColumns = null;
    //adminColumns = adminColumns.Concat(column);
    //columns[0] = column;
    //adminColumns.Add(new WebGridColumn() { ColumnName = "Delete", Header = "Delete" });
    //grid.Columns(columns[0]);
    //cols = cols.Concat(adminColumns);
    //cols = cols.Concat(adminColumns);
    //cols.Concat(adminColumns);
    //cols = cols.Concat(new WebGridColumn()[]{ column });
    
}

<div id="grid">
@grid.GetHtml(
    tableStyle: "grid",
    headerStyle: "head",
    alternatingRowStyle: "alt",
    columns: //columns)
    grid.Columns(
    grid.Column("UserName", "UserName", format: @<a href="/Admin/EditUser/@item.UserName">@item.UserName</a>, canSort: true),
    grid.Column("IsLockedOut", "Account Locked"),
    grid.Column("Comment", "Comment (DoxTree Profile ID)")//,
    //gridColumns[1]
    //grid.Column("EmailContact", "Email"),
    ////grid.Column("PasswordReset", "Password Reset")
    //grid.Column("Delete", "Delete")
    )    
)
</div>

<div>
@foreach (var item in Model.Cast<MembershipUser>())
{
    <p>User: @item.UserName SecurityAnswer: @DB.GetUserSecurityAnswer(item.UserName)</p>
}
</div>

<div>
@foreach (MembershipUser user in Model)
{
    var roles = Roles.GetRolesForUser(user.UserName);
        <p>
            @user.UserName
            <br />
            @foreach (var role in roles)
            {
                <span>@role</span>,
            }
        </p>
}
</div>

